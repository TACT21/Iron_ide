@page "/Experiment/JSBackGround"

@using Microsoft.JSInterop.WebAssembly
@using Microsoft.JSInterop
@using Microsoft.JSInterop.Infrastructure
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using System.Text.Json
@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.Core
@using BlazorWorker.WorkerCore
@inject IWorkerFactory workerFactory
@inject IJSRuntime jsRuntime

<h3>Javascript</h3>


<button @onclick="DoTest"> DO</button>

@code {
    public async Task DoTest()
    {
        // Create worker.
        var worker = await workerFactory.CreateAsync();

        // Create service reference. For most scenarios, it's safe (and best) to keep this
        // reference around somewhere to avoid the startup cost.
        var service = await worker.CreateBackgroundServiceAsync<Test>(
            options => options
                    .AddAssemblies("Microsoft.AspNetCore.Components.dll", "Microsoft.AspNetCore.Components.WebAssembly.dll", "System.Text.Encodings.Web.dll", "System.Text.Json.dll", "BlazorWorker.Core.dll", "Microsoft.JSInterop.WebAssembly.dll")
                .AddConventionalAssemblyOfService()
                .AddAssemblyOf<JSRuntime>()
        );
        worker.IncomingMessage += (object? sender, string? message) =>
        {
            Console.WriteLine(message);
            worker.PostMessageAsync(message);
        };
        // Reference that live outside of the current scope should not be passed into the expression.
        // To circumvent this, create a scope-local variable like this, and pass the local variable.
        string serial = JsonSerializer.Serialize<IJSRuntime>(jsRuntime);
        Console.WriteLine(serial);
        var result = await service.RunAsync(s => s.Initializer(serial, service.GetWorkerMessageService()));
    }

    class Test
    {
        IJSRuntime JS = null!;
        private IWorkerMessageService messageService;
        private string b = "";

        public async Task Initializer(string a, IWorkerMessageService messageService)
        {
            this.messageService = messageService;
            if(a != null)
            {
                JS = JsonSerializer.Deserialize<IJSRuntime>(a);
                //await TaskA();
            }
            await messageService.PostMessageAsync("Hello!");
            Task<string> sleepyTask = Task.Run(() =>
            {
                while (true)
                {
                    Thread.Sleep(1000); 
                    if (b != "")
                    {
                        break;
                    }
                }
                return b;
            });
            Console.WriteLine(sleepyTask.Result);
        }

        public async Task Initializer(IJSRuntime runtime)
        {
            JS = runtime;
            await TaskA();
        }

        public async Task<string> TaskA()
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./scripts/Test.js");
            var a = await module.InvokeAsync<string>("Test", null);
            Console.WriteLine(a);
            return a;
        }
    }
}
