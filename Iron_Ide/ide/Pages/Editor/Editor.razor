@page "/"
@page "/editor"

@using ide.Components.FileAgent

@inject IJSRuntime jsRuntime

<main>
    <FilePiker @ref="_File" />
    <div id="editor" style="height: 600px"></div>
</main>


@code {
    private FilePiker _File = null!;
    private FileCapsule capsule = null!;
    private int CurrentNumber = 0;
    private string[] decorationIds = new string[0];
    private IJSObjectReference module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("AceInit",new string[]{"editor"});
        }
    }

    public async Task<string> GetValue()
    {
        var result = await jsRuntime.InvokeAsync<string>("AceGetValue");
        return result;
    }

    public async Task SetValue(string value)
    {
        await jsRuntime.InvokeVoidAsync("AceSetValue",new string[]{value});
    }

    public async Task ChengeEditing(int index)
    {
        var context = await GetValue();
        lock (FileAgent.LockObjects[CurrentNumber])
        {
            FileAgent.capsules[CurrentNumber].File.SetLength(0);
            FileAgent.capsules[CurrentNumber].File.Write(
                FileAgent.capsules[CurrentNumber].Encoding.GetBytes(context)
            );
        }
        CurrentNumber = index;
        var content = new byte[FileAgent.capsules[CurrentNumber].File.Length];
        lock (FileAgent.LockObjects[CurrentNumber])
        {
            FileAgent.capsules[CurrentNumber].File.Read(content,0,content.Length);
        }
        await SetValue(FileAgent.capsules[CurrentNumber].Encoding.GetString(content));
        StateHasChanged();
    }

}