@using Toolbelt.Blazor.FileDropZone

<section class="comand_pallet">
    <button @onclick="AddFile"><span class="oi" data-glyph="plus"></span></button> @*New file*@
    <label for="file_input"><span class="oi" data-glyph="data-transfer-upload"></span></label> @*File upload*@
    <button><img src="./img/icon/dl.svg"  alt="Download file"/></button> @*File download*@
    <button><img src="./img/icon/dlall.svg"  alt="Download All file"/></button> @*All file download*@
    <button><span class="oi" data-glyph="cloud-upload"></span></button> @*Save on local storage*@
</section>
<FileDropZone>
    <InputFile id="file_input" OnChange="OnInputFileChange" />
    @foreach (var file in this.Files)
    {
        <div @key="file.Id">
            <button @onclick="() => InvokeFileOpener(file)">@file.Name</button>
            <button @onclick="() => OnClickRemove(file)"><span class="oi" data-glyph="trash"></span></button>
        </div>
    }
</FileDropZone>
<section style="@(HasError?"display:blocked":"display:none")">
    <p>ファイルサイズが大きすぎます。5MB以下に調節してください。</p>
</section>

@code{
    bool HasError = false;
    List<FileObject> Files = new();
    List<Func<int,Task>> Openers = new();

    private class FileObject
    {
        public Guid Id; // 固有の ID
        public string Name; // 名前
        public string Path;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        try
        {
            var file = new FileCapsule(
                args.File.OpenReadStream(((long)(5120000))) //5MB
                , "/" + args.File.Name
                , true
                , args.File.Name);
            await FileAgent.AppendFile(file);
        }catch(IOException ex)
        {
            Console.Error.WriteLine("File size is too big.\n"+ex.Message);
        }catch
        {
            throw;
        }
        foreach (var item in FileAgent.capsules)
        {
            Files.Add(new FileObject() { Id = Guid.NewGuid(), Name = item.Name, Path = item.Path });
        }
    }

    private void OnClickRemove(FileObject file)
    {
        this.Files.Remove(file);
    }

    private void InvokeFileOpener(FileObject file)
    {
        var index = this.Files.IndexOf(file);
        foreach (var item in Openers)
        {
            item(index);
        }  
    }

    private async Task AddFile()
    {
        Console.WriteLine("Add File");
        var file = new FileCapsule(
            new MemoryStream()
            , "/NewFile"
            , true
            , "NewFile"
            ,System.Text.Encoding.UTF8);
        await FileAgent.AppendFile(file);
            Files.Add(new FileObject() { Id = Guid.NewGuid(), Name = file.Name, Path = file.Path });
        StateHasChanged();
    }
}