@using Toolbelt.Blazor.FileDropZone

@inject IJSRuntime jSRuntime

<section>
    <article class="btns">
        <button id="add_file" @onclick="AddFile"><span class="oi" data-glyph="plus"></span></button> @*New file*@
        <button id="dl"><img src="./img/icon/dl.svg" alt="Download file" /></button> @*File download*@
        <button id="dl_all"><img src="./img/icon/dlall.svg" alt="Download All file" /></button> @*All file download*@
        <button id="save_storage"><span class="oi" data-glyph="cloud-upload"></span></button> @*Save on local storage*@
    </article>
    <article class="comand_pallet">
        <label for="add_file"><span class="oi" data-glyph="plus"></span></label> @*New file*@
        <label for="file_input"><span class="oi" data-glyph="data-transfer-upload"></span></label> @*File upload*@
        <label for="dl"><img src="./img/icon/dl.svg" alt="Download file" /></label> @*File download*@
        <label for="dl_all"><img src="./img/icon/dlall.svg" alt="Download All file" /></label> @*All file download*@
        <label for="save_storage"><span class="oi" data-glyph="cloud-upload"></span></label> @*Save on local storage*@
    </article>
    <FileDropZone>
        <InputFile id="file_input" OnChange="OnInputFileChange" />
        @foreach (var file in this.Files)
        {
            <div @key="file.Id">
                <button @onclick="() => InvokeFileOpener(file)">@file.Name</button>
                <button @onclick="() => OnClickRemove(file)"><span class="oi" data-glyph="trash"></span></button>
            </div>
        }
    </FileDropZone>
</section>

<section style="@(HasError?"display:blocked":"display:none")">
    <p>ファイルサイズが大きすぎます。5MB以下に調節してください。</p>
</section>

@code{
    bool HasError = false;
    List<FileObject> Files = new();
    private int Current = 0;
    public Func<string,Task> Opener = null!;
    public Func<Task<string>> Reader = null!;

    private class FileObject
    {
        public Guid Id; // 固有の ID
        public string Name; // 名前
        public string Path;
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        var stream = args.File.OpenReadStream((long)(5120000));// 5MB
        var content = new byte[stream.Length];
        var task = stream.ReadAsync(content, 0, content.Length);
        var fileSA = new FileCapsuleSerializeAgent();
        var fo = new FileObject();
        fo.Id = Guid.NewGuid();
        fo.Name = args.File.Name;
        fo.Path = "/" + args.File.Name;
        await task;
        Console.WriteLine(System.Text.Encoding.UTF8.GetString(content));
        await fileSA.ValueSetAsync(content //5MB
                , "/" + args.File.Name
                , args.File.Name);
        await jSRuntime.InvokeVoidAsync("SessionStorageWrite",new string[]{fo.Id.ToString(),fileSA.Serialize()});
        Files.Add(fo);
        Opener(fileSA.Content);
    }

    private void OnClickRemove(FileObject file)
    {
        this.Files.Remove(file);
    }

    private async void InvokeFileOpener(FileObject file)
    {
        var index = this.Files.IndexOf(file);
        Console.WriteLine("chenging docment:{0} to {1} \n @FilePiker.cs InvokeFileOpener", Files[Current].Id.ToString(), Files[index].Id.ToString());
        if(Current != index)
        {
            var fileSA = new FileCapsuleSerializeAgent();
            var streamGeter = Reader();
            var rawContent = jSRuntime.InvokeAsync<string>("SessionStorageRead", new string[] { Files[Current].Id.ToString() });
            var task = jSRuntime.InvokeAsync<string>("SessionStorageRead", new string[] { Files[index].Id.ToString() });
            await fileSA.DeserializeAsync(await rawContent);
            using(MemoryStream ms = new())
            {
                await fileSA.ValueSetAsync(
                    System.Text.Encoding.GetEncoding(fileSA.Encoding).GetBytes(await streamGeter),
                    fileSA.Path,
                    fileSA.Name,
                    System.Text.Encoding.GetEncoding(fileSA.Encoding)
                );
            }
            var a = fileSA.Serialize();
            Console.WriteLine(a+"@@@");
            var Writetask = jSRuntime.InvokeAsync<string>(
                "SessionStorageWrite",
                new string[]{
                    Files[Current].Id.ToString(),
                    a});
            Current = index;
            fileSA.Deserialize(await task);
            var nowait = Opener(fileSA.Content);
        }
    }

    private async Task AddFile()
    {
        Console.WriteLine("Add File");
        var file = new FileCapsule(
            new MemoryStream()
            , "/NewFile"
            , true
            , "NewFile"
            ,System.Text.Encoding.UTF8);
        await FileAgent.AppendFile(file);
        Files.Add(new FileObject() { Id = Guid.NewGuid(), Name = file.Name, Path = file.Path });
        StateHasChanged();
    }

    private async Task OnChengeFile(int index)
    {
        
    }
}